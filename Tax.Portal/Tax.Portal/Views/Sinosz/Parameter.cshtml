        
@{
    ViewBag.Title = "SINOSZ-Rendszerbeállítás";
}

<style type="text/css">
    .ui-jqgrid .ui-state-highlight {
        background: #cccccc;
    }
    /*nem tudom a web lapon customizálni*/
    .container .grid {
        border: 1px solid #ddd;
        padding-left: 0px;
        padding-top: 15px;
        padding-right: 0px;
        padding-bottom: 15px;
        margin-left: 0px;
        margin-top: 0px;
        margin-right: 0px;
        margin-bottom: 0px;
    }
</style>

<h2>@ViewBag.Title</h2>

@Html.ValidationSummary()
<div class="bs-example bs-example-tabs">
    <ul id="SinoszTab" class="nav nav-tabs" data-tabs="tabs">
        <li class="active"><a data-toggle="tab" href="#Tagszervezetek">Tagszervezetek</a></li>
        <li><a data-toggle="tab" href="#Befizetési_jogcímek">Befizetési jogcímek</a></li>
        <li><a data-toggle="tab" href="#Elérhetőségek">Elérhetőségek</a></li>
        <li><a data-toggle="tab" href="#Feltölthető_típusok">Feltölthető típusok</a></li>
        <li><a data-toggle="tab" href="#Nyugdíj_típusok">Nyugdíj típusok</a></li>
        <li><a data-toggle="tab" href="#Üdvözlő_üzenet">Üdvözlő üzenet</a></li>
    </ul>
       
    <div id="SinoszTabContent" class="tab-content">
        <div class="tab-pane fade in active" id="Tagszervezetek">
            <div class="row">
                <div class="container grid">
                    <div class="col-md-12">
                        <div>
                            <table id="organizations" class="display"><tr><td /></tr></table>
                            <div id="organizationspager"></div>
                            <hr />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="Befizetési_jogcímek">
            <div class="row">
                <div class="container grid">
                    <div class="col-md-12">
                        <div>
                            <table id="documenttypes" class="display"><tr><td /></tr></table>
                            <div id="documenttypespager"></div>
                            <hr />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="Elérhetőségek">
            <div class="row">
                <div class="container grid">
                    <div class="col-md-12">
                        <div>
                            <table id="addresstypes" class="display"><tr><td /></tr></table>
                            <div id="addresstypespager"></div>
                            <hr />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="Feltölthető_típusok">
            <div class="row">
                <div class="container grid">
                    <div class="col-md-12">
                        <div>
                            <table id="filetypes" class="display"><tr><td /></tr></table>
                            <div id="filetypespager"></div>
                            <hr />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="Nyugdíj_típusok">
            <div class="row">
                <div class="container grid">
                    <div class="col-md-12">
                        <div>
                            <table id="pensiontypes" class="display"><tr><td /></tr></table>
                            <div id="pensiontypespager"></div>
                            <hr />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="Üdvözlő_üzenet">
            <div class="row">
                <div class="container grid">
                    <div class="col-md-12">
                        <div>
                            <table id="news" class="display"><tr><td /></tr></table>
                            <div id="newspager"></div>
                            <hr />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {


    <link href="~/Scripts/ckeditor/contents.css" rel="stylesheet" />
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>

    @*@Scripts.Render("~/Scripts/ckeditorcss")*@
    @*@Scripts.Render("~/Scripts/ckeditorjs")*@
    @Scripts.Render("~/Scripts/jqgrid")

<script type="text/javascript">
    (function (global, undefined) {
        var SelectedInterpretercenterID = null;

        var getColumnIndexByName = function (gridname, columnName) {
            var grid = $("#" + gridname);
            var cm = grid.jqGrid('getGridParam', 'colModel');
            var retval = -1;
            $.each(cm, function () {
                if (this.name === columnName) {
                    retval = cm.indexOf(this);
                }
            });
            return retval;
        };

        numberSearchOptions = ['eq', 'ne', 'lt', 'le', 'gt', 'ge'];// 'nu', 'nn', 'in', 'ni'],

        numberTemplate = {
            formatter: 'integer', align: 'right', sorttype: 'number',
            searchoptions: { sopt: numberSearchOptions }
        };

        jQuery("#documenttypes").jqGrid({
            url: '@Url.Action("ListDocumenttypes", "Sinosz")',
            editurl: '@Url.Action("UpdateDocumenttypes", "Sinosz")',
            datatype: "json",
            colNames: [
                'Műveletek'
                , 'id'
                , 'Jogcím'
                , 'Fixösszegű?'
                , 'Összeg'
                , 'Tagdíj?'
                , 'Igazolványköltség?'
                , 'Hozzárendelt tagviszony'
                , 'Engedélyezett?'
                , 'Törölhető?'
            ],
            colModel: [
                {
                    "name": "act"
                    , "formatoptions": { "keys": false, "editbutton": true, "delbutton": true }
                    , "width": 60
                    , "formatter": "actions"
                    , "searchoptions": {}
                    , "index": "act"
                    , sortable: false
                    , search: false
                },
                {
                    name: 'Id', index: 'Id', hidden: true, sortable: false, editable: false,
                    editoptions: {
                        dataInit: function (element) { //mindenképpen kisül a beforeSelectRow előtt az inline edit, ez viszont szerencsére megelőzi,
                            $(this).jqGrid('getColProp', 'isFixsum').formatoptions.disabled = false;
                            $(this).jqGrid('getColProp', 'isMembershipCost').formatoptions.disabled = false;
                            $(this).jqGrid('getColProp', 'isCardCost').formatoptions.disabled = false;
                            $(this).jqGrid('getColProp', 'isEnabled').formatoptions.disabled = false;
                        }
                    }
                },
                { name: 'AccountingTypeName', index: 'AccountingTypeName', width: 250, align: "left", editable: true, sortable: true },
                {
                    name: 'isFixsum', index: 'isFixsum', width: 70, align: "center", editable: true,
                    edittype: 'checkbox', editoptions: { value: "True:False" },
                    searchoptions: { sopt: ['eq'], value: '"":Mind;True:Aktív;False:Inaktív' }, stype: 'select',
                    formatter: "checkbox", formatoptions: { disabled: true }, sortable: true
                },
                {
                    name: 'Presum', index: 'Presum', width: 70,                    
                    hidden: false, search: true, template: numberTemplate,
                    editable: true, editrules: { integer: true }, searchrules: { integer: true } 
                },
                {
                    name: 'isMembershipCost', index: 'isMembershipCost', width: 70, align: "center", editable: true,
                    edittype: 'checkbox', editoptions: { value: "True:False" },
                    searchoptions: { sopt: ['eq'], value: '"":Mind;True:Aktív;False:Inaktív' }, stype: 'select',
                    formatter: "checkbox", formatoptions: { disabled: true }, sortable: true
                },
                {
                    name: 'isCardCost', index: 'isCardCost', width: 70, align: "center", editable: true,
                    edittype: 'checkbox', editoptions: { value: "True:False" },
                    searchoptions: { sopt: ['eq'], value: '"":Mind;True:Aktív;False:Inaktív' }, stype: 'select',
                    formatter: "checkbox", formatoptions: { disabled: true }, sortable: true
                },
                {
                    name: 'RelationshipName', index: 'RelationshipName', width: 110, align: "left", editable: true, sortable: true, edittype: 'select',
                    editoptions: {
                        dataUrl: '@Url.Action("ListRelationships", "Sinosz")',
                        buildSelect: function (result) { return result; },
                        NullIfEmpty: true
                    }
                },
                {
                    name: 'isEnabled', index: 'isEnabled', width: 70, align: "center", editable: true,
                    edittype: 'checkbox', editoptions: { value: "True:False" },
                    searchoptions: { sopt: ['eq'], value: '"":Mind;True:Aktív;False:Inaktív' }, stype: 'select',
                    formatter: "checkbox", formatoptions: { disabled: true }, sortable: true
                },
                { name: 'AccountingDocumentCount', index: 'AccountingDocumentCount', hidden: true, sortable: false, editable: false }
            ],
            rowNum: 20,
            rowList: [20, 40, 60],
            toppager: true,
            pager: '#documenttypespager',
            sortname: 'AccountingTypeName',
            viewrecords: true,
            sortorder: "asc",
            caption: 'Befizetési jogcímek',
            rownumbers: true,
            gridview: true,
            hoverrows: true,
            scrollrows: false,
            shrinkToFit: false,
            height: '100%',
            width: '800',
            loadComplete: function () {
                var i = getColumnIndexByName('documenttypes', 'isFixsum');
                $("table#documenttypes > tbody > tr.jqgrow > td:nth-child(" + (i + 1) + ") > input").click(function (e) {
                    var data = new Array(2);
                    data[0] = "{doctypeid: '" + $(this).parents('tr').attr('id').replace(/^s*|s*$/g, "") + "',"; // replace = trim
                    var value = ($(this).is(':checked')) ? "True" : "False";
                    data[1] = "value: '" + value + "'}";
                    $.ajax({
                        url: '@Url.Action("UpdateisFixsum", "Sinosz")',
                        type: 'POST',
                        data: eval('(' + data[0] + data[1] + ')'),  //eval is string to json
                        beforeSend: function (jqXHR, textStatus) { jQuery('#grid_id').block({ message: '<h3>Betöltés…</h3>' }); },
                        complete: function (jqXHR, textStatus) { jQuery('#grid_id').unblock(); $("#documenttypes").trigger("reloadGrid", [{ current: true }]); },
                        loadError: function (xhr, status, error) { alert(status + " " + error); }
                    });
                });
                i = getColumnIndexByName('documenttypes', 'isMembershipCost');
                $("table#documenttypes > tbody > tr.jqgrow > td:nth-child(" + (i + 1) + ") > input").click(function (e) {
                    var data = new Array(2);
                    data[0] = "{doctypeid: '" + $(this).parents('tr').attr('id').replace(/^s*|s*$/g, "") + "',"; // replace = trim
                    var value = ($(this).is(':checked')) ? "True" : "False";
                    data[1] = "value: '" + value + "'}";
                    $.ajax({
                        url: '@Url.Action("UpdateisMembershipCost", "Sinosz")',
                        type: 'POST',
                        data: eval('(' + data[0] + data[1] + ')'),  //eval is string to json
                        beforeSend: function (jqXHR, textStatus) { jQuery('#grid_id').block({ message: '<h3>Betöltés…</h3>' }); },
                        complete: function (jqXHR, textStatus) { jQuery('#grid_id').unblock(); $("#documenttypes").trigger("reloadGrid", [{ current: true }]); },
                        loadError: function (xhr, status, error) { alert(status + " " + error); }
                    });
                });
                i = getColumnIndexByName('documenttypes', 'isCardCost');
                $("table#documenttypes > tbody > tr.jqgrow > td:nth-child(" + (i + 1) + ") > input").click(function (e) {
                    var data = new Array(2);
                    data[0] = "{doctypeid: '" + $(this).parents('tr').attr('id').replace(/^s*|s*$/g, "") + "',"; // replace = trim
                    var value = ($(this).is(':checked')) ? "True" : "False";
                    data[1] = "value: '" + value + "'}";
                    $.ajax({
                        url: '@Url.Action("UpdateisCardCost", "Sinosz")',
                        type: 'POST',
                        data: eval('(' + data[0] + data[1] + ')'),  //eval is string to json
                        beforeSend: function (jqXHR, textStatus) { jQuery('#grid_id').block({ message: '<h3>Betöltés…</h3>' }); },
                        complete: function (jqXHR, textStatus) { jQuery('#grid_id').unblock(); $("#documenttypes").trigger("reloadGrid", [{ current: true }]); },
                        loadError: function (xhr, status, error) { alert(status + " " + error); }
                    });
                });
                i = getColumnIndexByName('documenttypes', 'isEnabled');
                $("table#documenttypes > tbody > tr.jqgrow > td:nth-child(" + (i + 1) + ") > input").click(function (e) {
                    var data = new Array(2);
                    data[0] = "{doctypeid: '" + $(this).parents('tr').attr('id').replace(/^s*|s*$/g, "") + "',"; // replace = trim
                    var value = ($(this).is(':checked')) ? "True" : "False";
                    data[1] = "value: '" + value + "'}";
                    $.ajax({
                        url: '@Url.Action("UpdateisEnabled", "Sinosz")',
                        type: 'POST',
                        data: eval('(' + data[0] + data[1] + ')'),  //eval is string to json
                        beforeSend: function (jqXHR, textStatus) { jQuery('#grid_id').block({ message: '<h3>Betöltés…</h3>' }); },
                        complete: function (jqXHR, textStatus) { jQuery('#grid_id').unblock(); $("#documenttypes").trigger("reloadGrid", [{ current: true }]); },
                        loadError: function (xhr, status, error) { alert(status + " " + error); }
                    });
                });
                var ids = jQuery("#documenttypes").getDataIDs();
                for (var i = 0; i < ids.length; i++) {
                    if (jQuery("#documenttypes").getCell(ids[i], 'AccountingDocumentCount') == "0") {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").show();
                    }
                    else {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").hide();
                    };
                }
            }

        });

        jQuery("#documenttypes").jqGrid('navGrid', '#documenttypespager'
            , { edit: false, add: true, del: false, refresh: true, cloneToTop: true }
            , {} //prmEdit
            , { width: 500, recreateForm: true, closeAfterAdd: true } //prmAdd
            , {} //prmDel
            , {
                width: 600,
                multipleSearch: true,
                //multipleGroup: true,
                recreateFilter: true,
                //closeOnEscape: true,
                //closeAfterSearch: true,
                overlay: 0,
                afterRedraw: function () {
                    $('input.add-rule', this)//.button().val('Add new rule')
                        .attr('title', 'Új szabály hozzáadása');
                    //$('input.add-group', this)//.button().val('Add new group or rules')
                    //    .attr('title', 'Új szabálycsoport hozzáadása');
                    $('input.delete-rule', this)//.button().val('Delete rule')
                        .attr('title', 'Szabály törlése');
                    //$('input.delete-group', this)//.button().val('Delete group')
                    //    .attr('title', 'Szabálycsoport törlése');
                    //$(this).find("table.group:not(:first)").css({
                    //    borderWidth: "1px",
                    //    borderStyle: "dashed"
                    //});
                }
            } //prmSearch
            , {} //prmView
        ).jqGrid('filterToolbar', { stringResult: true, searchOnEnter: true, defaultSearch: "cn" });

        jQuery("#organizations").jqGrid({
            url: '@Url.Action("ListOrganizationParams", "Sinosz")',
            editurl: '@Url.Action("UpdateOrganizations", "Sinosz")',
            datatype: "json",
            colNames: [
                'Műveletek'
                , 'id'
                , 'Név'
                , 'Megye'
                , 'IRSZ'
                , 'Város'
                , 'Utca, Házszám'
                , 'Felettes tagszervezet'
                , 'Törölhető?'
            ],
            colModel: [
                {
                    "name": "act"
                    , "formatoptions": { "keys": false, "editbutton": true, "delbutton": true }
                    , "width": 60
                    , "formatter": "actions"
                    , "searchoptions": {}
                    , "index": "act"
                    , sortable: false
                    , search: false
                },
                { name: 'Id', index: 'Id', hidden: true, sortable: false, editable: false, },
                { name: 'OrganizationName', index: 'OrganizationName', width: 200, align: "left", editable: true, sortable: true },
                { name: 'Country', index: 'Country', width: 70, align: "left", editable: false, sortable: true },
                {
                    name: 'Postcode', index: 'Postcode', width: 40, align: "left", editable: true, sortable: true, edittype: 'select',
                    editoptions: {
                        dataUrl: '@Url.Action("ListPostcode", "Admin")',
                        buildSelect: function (result) { return result; },
                        NullIfEmpty: true
                    }
                },
                { name: 'City', index: 'City', width: 80, align: "left", editable: false, sortable: true },
                { name: 'Address', index: 'Address', width: 230, align: "left", editable: true, sortable: true },
                {
                    name: 'UpperOrganization', index: 'UpperOrganization', width: 200, align: "left", editable: true, sortable: true, edittype: 'select',
                    editoptions: {
                        dataUrl: '@Url.Action("ListOrganizations", "Sinosz")',
                        buildSelect: function (result) { return result; },
                        NullIfEmpty: true
                    }
                },
                { name: 'OrganizationCount', index: 'OrganizationCount', hidden: true, sortable: false, editable: false }
            ],
            rowNum: 20,
            rowList: [20, 40, 60],
            toppager: true,
            pager: '#organizationspager',
            //sortname: 'OrganizationName',
            viewrecords: true,
            //sortorder: "asc",
            caption: 'Tagszervezetek',
            rownumbers: true,
            gridview: true,
            hoverrows: true,
            scrollrows: false,
            shrinkToFit: false,
            height: '100%',
            width: '910',
            loadComplete: function () {
                var ids = jQuery("#organizations").getDataIDs();
                for (var i = 0; i < ids.length; i++) {
                    if (jQuery("#organizations").getCell(ids[i], 'OrganizationCount') == "0") {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").show();
                    }
                    else {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").hide();
                    };
                }
            }

        });

        jQuery("#organizations").jqGrid('navGrid', '#organizationspager'
            , { edit: false, add: true, del: false, refresh: true, cloneToTop: true }
            , {} //prmEdit
            , { width: 600, recreateForm: true, closeAfterAdd: true } //prmAdd
            , {} //prmDel
            , {
                width: 600,
                multipleSearch: true,
                //multipleGroup: true,
                recreateFilter: true,
                //closeOnEscape: true,
                //closeAfterSearch: true,
                overlay: 0,
                afterRedraw: function () {
                    $('input.add-rule', this)//.button().val('Add new rule')
                        .attr('title', 'Új szabály hozzáadása');
                    //$('input.add-group', this)//.button().val('Add new group or rules')
                    //    .attr('title', 'Új szabálycsoport hozzáadása');
                    $('input.delete-rule', this)//.button().val('Delete rule')
                        .attr('title', 'Szabály törlése');
                    //$('input.delete-group', this)//.button().val('Delete group')
                    //    .attr('title', 'Szabálycsoport törlése');
                    //$(this).find("table.group:not(:first)").css({
                    //    borderWidth: "1px",
                    //    borderStyle: "dashed"
                    //});
                }
            } //prmSearch
            , {} //prmView
        ).jqGrid('filterToolbar', { stringResult: true, searchOnEnter: true, defaultSearch: "cn" });

        jQuery("#addresstypes").jqGrid({
            url: '@Url.Action("ListAddressTypeParams", "Sinosz")',
            editurl: '@Url.Action("UpdateAddressTypes", "Sinosz")',
            datatype: "json",
            colNames: [
                'Műveletek'
                , 'id'
                , 'Megnevezés'
                , 'Törölhető?'
            ],
            colModel: [
                {
                    "name": "act"
                    , "formatoptions": { "keys": false, "editbutton": true, "delbutton": true }
                    , "width": 60
                    , "formatter": "actions"
                    , "searchoptions": {}
                    , "index": "act"
                    , sortable: false
                    , search: false
                },
                { name: 'Id', index: 'Id', hidden: true, sortable: false, editable: false, },
                { name: 'AddressTypeName', index: 'AddressTypeName', width: 410, align: "left", editable: true, sortable: true },
                { name: 'AddressTypeCount', index: 'AddressTypeCount', hidden: true, sortable: false, editable: false }
            ],
            rowNum: 20,
            rowList: [20, 40, 60],
            toppager: true,
            pager: '#addresstypespager',
            //sortname: 'OrganizationName',
            viewrecords: true,
            //sortorder: "asc",
            caption: 'Elérhetőségek',
            rownumbers: true,
            gridview: true,
            hoverrows: true,
            scrollrows: false,
            shrinkToFit: false,
            height: '100%',
            width: '500',
            loadComplete: function () {
                var ids = jQuery("#addresstypes").getDataIDs();
                for (var i = 0; i < ids.length; i++) {
                    if (jQuery("#addresstypes").getCell(ids[i], 'AddressTypeCount') == "0") {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").show();
                    }
                    else {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").hide();
                    };
                }
            }

        });

        jQuery("#addresstypes").jqGrid('navGrid', '#addresstypespager'
            , { edit: false, add: true, del: false, refresh: true, cloneToTop: true }
            , {} //prmEdit
            , { width: 500, recreateForm: true, closeAfterAdd: true } //prmAdd
            , {} //prmDel
            , {
                width: 600,
                multipleSearch: true,
                //multipleGroup: true,
                recreateFilter: true,
                //closeOnEscape: true,
                //closeAfterSearch: true,
                overlay: 0,
                afterRedraw: function () {
                    $('input.add-rule', this)//.button().val('Add new rule')
                        .attr('title', 'Új szabály hozzáadása');
                    //$('input.add-group', this)//.button().val('Add new group or rules')
                    //    .attr('title', 'Új szabálycsoport hozzáadása');
                    $('input.delete-rule', this)//.button().val('Delete rule')
                        .attr('title', 'Szabály törlése');
                    //$('input.delete-group', this)//.button().val('Delete group')
                    //    .attr('title', 'Szabálycsoport törlése');
                    //$(this).find("table.group:not(:first)").css({
                    //    borderWidth: "1px",
                    //    borderStyle: "dashed"
                    //});
                }
            } //prmSearch
            , {} //prmView
        ).jqGrid('filterToolbar', { stringResult: true, searchOnEnter: true, defaultSearch: "cn" });

        jQuery("#filetypes").jqGrid({
            url: '@Url.Action("ListFileTypeParams", "Sinosz")',
            editurl: '@Url.Action("UpdateFileTypes", "Sinosz")',
            datatype: "json",
            colNames: [
                'Műveletek'
                , 'id'
                , 'Fájltípus'
                , 'Törölhető?'
            ],
            colModel: [
                {
                    "name": "act"
                    , "formatoptions": { "keys": false, "editbutton": true, "delbutton": true }
                    , "width": 60
                    , "formatter": "actions"
                    , "searchoptions": {}
                    , "index": "act"
                    , sortable: false
                    , search: false
                },
                { name: 'Id', index: 'Id', hidden: true, sortable: false, editable: false, },
                { name: 'FileTypeName', index: 'FileTypeName', width: 410, align: "left", editable: true, sortable: true },
                { name: 'AttachedFileCount', index: 'AttachedFileCount', hidden: true, sortable: false, editable: false }
            ],
            rowNum: 20,
            rowList: [20, 40, 60],
            toppager: true,
            pager: '#filetypespager',
            //sortname: 'FileTypeName',
            viewrecords: true,
            //sortorder: "asc",
            caption: 'Feltölthető fájltípusok',
            rownumbers: true,
            gridview: true,
            hoverrows: true,
            scrollrows: false,
            shrinkToFit: false,
            height: '100%',
            width: '500',
            loadComplete: function () {
                var ids = jQuery("#filetypes").getDataIDs();
                for (var i = 0; i < ids.length; i++) {
                    if (jQuery("#filetypes").getCell(ids[i], 'AttachedFileCount') == "0") {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").show();
                    }
                    else {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").hide();
                    };
                }
            }

        });

        jQuery("#filetypes").jqGrid('navGrid', '#filetypespager'
            , { edit: false, add: true, del: false, refresh: true, cloneToTop: true }
            , {} //prmEdit
            , { width: 500, recreateForm: true, closeAfterAdd: true } //prmAdd
            , {} //prmDel
            , {
                width: 600,
                multipleSearch: true,
                //multipleGroup: true,
                recreateFilter: true,
                //closeOnEscape: true,
                //closeAfterSearch: true,
                overlay: 0,
                afterRedraw: function () {
                    $('input.add-rule', this)//.button().val('Add new rule')
                        .attr('title', 'Új szabály hozzáadása');
                    //$('input.add-group', this)//.button().val('Add new group or rules')
                    //    .attr('title', 'Új szabálycsoport hozzáadása');
                    $('input.delete-rule', this)//.button().val('Delete rule')
                        .attr('title', 'Szabály törlése');
                    //$('input.delete-group', this)//.button().val('Delete group')
                    //    .attr('title', 'Szabálycsoport törlése');
                    //$(this).find("table.group:not(:first)").css({
                    //    borderWidth: "1px",
                    //    borderStyle: "dashed"
                    //});
                }
            } //prmSearch
            , {} //prmView
        ).jqGrid('filterToolbar', { stringResult: true, searchOnEnter: true, defaultSearch: "cn" });

        jQuery("#pensiontypes").jqGrid({
            url: '@Url.Action("ListPensionTypeParams", "Sinosz")',
            editurl: '@Url.Action("UpdatePensionTypes", "Sinosz")',
            datatype: "json",
            colNames: [
                'Műveletek'
                , 'id'
                , 'Megnevezés'
                , 'Törölhető?'
            ],
            colModel: [
                {
                    "name": "act"
                    , "formatoptions": { "keys": false, "editbutton": true, "delbutton": true }
                    , "width": 60
                    , "formatter": "actions"
                    , "searchoptions": {}
                    , "index": "act"
                    , sortable: false
                    , search: false
                },
                { name: 'Id', index: 'Id', hidden: true, sortable: false, editable: false, },
                { name: 'PensionTypeName', index: 'PensionTypeName', width: 410, align: "left", editable: true, sortable: true },
                { name: 'SinoszUserCount', index: 'SinoszUserCount', hidden: true, sortable: false, editable: false }
            ],
            rowNum: 20,
            rowList: [20, 40, 60],
            toppager: true,
            pager: '#pensiontypespager',
            //sortname: 'FileTypeName',
            viewrecords: true,
            //sortorder: "asc",
            caption: 'Nyugdíj típusok',
            rownumbers: true,
            gridview: true,
            hoverrows: true,
            scrollrows: false,
            shrinkToFit: false,
            height: '100%',
            width: '500',
            loadComplete: function () {
                var ids = jQuery("#pensiontypes").getDataIDs();
                for (var i = 0; i < ids.length; i++) {
                    if (jQuery("#pensiontypes").getCell(ids[i], 'SinoszUserCount') == "0") {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").show();
                    }
                    else {
                        $("tr#" + $.jgrid.jqID(ids[i]) + " div.ui-inline-del").hide();
                    };
                }
            }
        });

        jQuery("#pensiontypes").jqGrid('navGrid', '#pensiontypespager'
            , { edit: false, add: true, del: false, refresh: true, cloneToTop: true }
            , {} //prmEdit
            , {} //prmAdd
            , {} //prmDel
            , {
                width: 600,
                multipleSearch: true,
                //multipleGroup: true,
                recreateFilter: true,
                //closeOnEscape: true,
                //closeAfterSearch: true,
                overlay: 0,
                afterRedraw: function () {
                    $('input.add-rule', this)//.button().val('Add new rule')
                        .attr('title', 'Új szabály hozzáadása');
                    //$('input.add-group', this)//.button().val('Add new group or rules')
                    //    .attr('title', 'Új szabálycsoport hozzáadása');
                    $('input.delete-rule', this)//.button().val('Delete rule')
                        .attr('title', 'Szabály törlése');
                    //$('input.delete-group', this)//.button().val('Delete group')
                    //    .attr('title', 'Szabálycsoport törlése');
                    //$(this).find("table.group:not(:first)").css({
                    //    borderWidth: "1px",
                    //    borderStyle: "dashed"
                    //});
                }
            } //prmSearch
            , {} //prmView
        ).jqGrid('filterToolbar', { stringResult: true, searchOnEnter: true, defaultSearch: "cn" });

        function ab_beforeShowForm(ids) {
            if (typeof (CKEDITOR.instances.NewsText) != 'undefined') {
                try {
                    CKEDITOR.instances.NewsText.destroy();
                } catch (e) {
                    delete CKEDITOR.instances.NewsText; //ez kinyírja, de marad az objektuma  formon
                    //CKEDITOR.remove('NewsText');
                    $('#cke_NewsText', ids).remove()
                }                
            }
            CKEDITOR.replace('NewsText', { height: 200, language: 'hu' });

            return [true, ''];
        };

        function ab_afterShowForm(ids) {
            selID = $('#news').getGridParam('selrow'); // get selected row    
            if (selID != null) { // then it must be edit?
                va = $('#news').getRowData(selID);
                CKEDITOR.instances.NewsText.setData(va['NewsText']);
            } else { //IN ADD
                CKEDITOR.instances.NewsText.setData('');
            }
            return [true, ''];
        };

        function ab_beforeSubmit(data) {
            data['NewsText'] = CKEDITOR.instances.NewsText.getData();
            return [true, ''];
        };

        jQuery("#news").jqGrid({
            url: '@Url.Action("ListNewsParams", "Sinosz")',
            editurl: '@Url.Action("UpdateNews", "Sinosz")',
            datatype: "json",
            colNames: [
                'id'
                , 'Megjelenés'
                , 'Tárgy'
                , 'Üzenet'
                , 'Típus'
            ],
            colModel: [
                { name: 'Id', index: 'Id', hidden: true, sortable: false, editable: false, },
                { name: 'PublishingDate', index: 'PublishingDate', width: 130, align: "left", editable: false, sortable: false, hidden: true },
                { name: 'NewsTitle', index: 'NewsTitle', width: 150, align: "left", editable: true, edittype: "textarea", sortable: true },
                { name: "NewsText", index: "NewsText", width: 500, editable: true, edittype: "textarea", editrules: { edithidden: true }, sortable: true, sorttype: "string" },
                {
                    name: 'NewsTypeName', index: 'NewsTypeName', width: 80, align: "left", editable: true, sortable: true, edittype: 'select',
                    editoptions: {
                        dataUrl: '@Url.Action("ListNewsTypes", "Sinosz")',
                        buildSelect: function (result) { return result; },
                        NullIfEmpty: true
                    }
                }
            ],
            rowNum: 10,
            rowList: [10, 20, 30],
            toppager: true,
            pager: '#newspager',
            //sortname: 'PublishingDate',
            viewrecords: true,
            //sortorder: "asc",
            caption: 'Nyugdíj típusok',
            rownumbers: true,
            gridview: true,
            hoverrows: true,
            scrollrows: false,
            shrinkToFit: false,
            height: '100%',
            width: '760',
        });

        jQuery("#news").jqGrid('navGrid', '#newspager'
            , { edit: true, add: true, del: true, refresh: true, cloneToTop: true }
            , {
                width: 800,
                reloadAfterSubmit: true,
                viewPagerButtons: false,
                beforeSubmit: ab_beforeSubmit,
                beforeShowForm: ab_beforeShowForm,
                afterShowForm: ab_afterShowForm,
                closeAfterEdit: true
              } // update data
            , {
                width: 800,
                reloadAfterSubmit: true,
                beforeSubmit: ab_beforeSubmit,
                beforeShowForm: function () { ab_beforeShowForm(); jQuery("#news").jqGrid('resetSelection'); },
                afterShowForm: ab_afterShowForm,
                closeAfterAdd: true
              } // insert data
            , { width:300,reloadAfterSubmit:true,
              } // delete data
            , {
                width: 600,
                multipleSearch: true,
                //multipleGroup: true,
                recreateFilter: true,
                //closeOnEscape: true,
                //closeAfterSearch: true,
                overlay: 0,
                afterRedraw: function () {
                    $('input.add-rule', this)//.button().val('Add new rule')
                        .attr('title', 'Új szabály hozzáadása');
                    //$('input.add-group', this)//.button().val('Add new group or rules')
                    //    .attr('title', 'Új szabálycsoport hozzáadása');
                    $('input.delete-rule', this)//.button().val('Delete rule')
                        .attr('title', 'Szabály törlése');
                    //$('input.delete-group', this)//.button().val('Delete group')
                    //    .attr('title', 'Szabálycsoport törlése');
                    //$(this).find("table.group:not(:first)").css({
                    //    borderWidth: "1px",
                    //    borderStyle: "dashed"
                    //});
                }
            } //prmSearch
            , {} //preview
        ).jqGrid('filterToolbar', { stringResult: true, searchOnEnter: true, defaultSearch: "cn" });

    }(window));

</script>

}